// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

contract FeeCollector {
    address public owner;
    uint256 public balance;

    string public name = "SimpleToken";
    string public symbol = "STK";
    uint8 public decimals = 18;
    uint256 public totalSupply;

    mapping(address => uint256) public tokenBalanceOf;

    //logging transfer and minting events
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Mint(address indexed to, uint256 value);
    event EtherReceived(address indexed from, uint256 value);
    event Withdrawal(address indexed to, uint256 value);

    constructor(uint256 _initialSupply) {
        owner = msg.sender;
        mint(owner, _initialSupply);  // Mint initial supply to the owner
    }

    // mint new tokens
    function mint(address _to, uint256 _amount) public {
        require(msg.sender == owner, "Only the owner can mint tokens");
        totalSupply += _amount;
        tokenBalanceOf[_to] += _amount;
        emit Mint(_to, _amount);
    }

    // transfer tokens
    function transfer(address _to, uint256 _amount) public returns (bool success) {
        require(tokenBalanceOf[msg.sender] >= _amount, "Not enough token balance");
        tokenBalanceOf[msg.sender] -= _amount;
        tokenBalanceOf[_to] += _amount;
        emit Transfer(msg.sender, _to, _amount);
        return true;
    }


    receive() payable external {
        balance += msg.value;
        emit EtherReceived(msg.sender, msg.value);
    }

   
    function withdraw(uint256 _amount, address payable _destAddr) public {
        require(msg.sender == owner, "Only owner can withdraw Ether");
        require(_amount <= balance, "Insufficient Ether balance");
        _destAddr.transfer(_amount);
        balance -= _amount;
        emit Withdrawal(_destAddr, _amount);
    }
}
